if true then
  return {}
end

return {
  {
    "LazyVim/LazyVim",
    opts = {
      colorscheme = function()
        require("catppuccin").load()
      end,
    },
  },
  {
    "catppuccin/nvim",
    name = "catppuccin",
    lazy = false,
    priority = 1000,
    config = function()
      require("catppuccin").setup({
        background = {
          light = "latte",
          dark = "mocha",
        },
        color_overrides = {
          mocha = {
            rosewater = "#FB4834",
            flamingo = "#FB4834",
            red = "#FB4834",
            maroon = "#FB4834",
            pink = "#d3859b",
            mauve = "#d3859b",
            peach = "#e78a4e",
            yellow = "#FBBD2E",
            green = "#8dc07c",
            teal = "#B9BB25",
            sky = "#99c792",
            sapphire = "#99c792",
            blue = "#8dbba3",
            lavender = "#8dbba3",
            text = "#f1e4c2",
            subtext2 = "#c5b4a1",
            subtext1 = "#d5c4a1",
            subtext0 = "#bdae93",
            overlay2 = "#a89984",
            overlay1 = "#928374",
            overlay0 = "#595959",
            surface2 = "#4d4d4d",
            surface1 = "#404040",
            surface0 = "#292929",
            base = "#111111",
            mantle = "#3C3836",
            crust = "#1A1A29",
          },
          frappe = {
            rosewater = "#eb7a73",
            flamingo = "#eb7a73",
            red = "#eb7a73",
            maroon = "#eb7a73",
            pink = "#e396a4",
            mauve = "#e396a4",
            peach = "#e89a5e",
            yellow = "#E7B84C",
            green = "#7cb66a",
            teal = "#99c792",
            sky = "#99c792",
            sapphire = "#99c792",
            blue = "#8dbba3",
            lavender = "#8dbba3",
            text = "#f1e4c2",
            subtext1 = "#e5d5b1",
            subtext0 = "#c5bda3",
            overlay2 = "#b8a994",
            overlay1 = "#a39284",
            overlay0 = "#656565",
            surface2 = "#5d5d5d",
            surface1 = "#505050",
            surface0 = "#393939",
            base = "#1d2224",
            mantle = "#1d2224",
            crust = "#1f2223",
          },
        },
        transparent_background = false,
        show_end_of_buffer = false,
        integration_default = false,
        integrations = {
          barbecue = { dim_dirname = true, bold_basename = true, dim_context = false, alt_background = false },
          cmp = true,
          gitsigns = true,
          hop = true,
          illuminate = { enabled = true },
          native_lsp = { enabled = true, inlay_hints = { background = true } },
          neogit = true,
          neotree = true,
          semantic_tokens = true,
          treesitter = true,
          treesitter_context = true,
          vimwiki = true,
          which_key = true,
        },
        highlight_overrides = {
          all = function(colors)
            return {
              CmpItemMenu = { fg = colors.surface2 },
              CursorLineNr = { fg = colors.text },
              FloatBorder = { bg = colors.base, fg = colors.subtext1 }, -- colors.surface0 }, difficult to see
              GitSignsChange = { fg = colors.peach },
              LineNr = { fg = colors.overlay0 },
              LspInfoBorder = { link = "FloatBorder" },
              NeoTreeDirectoryIcon = { fg = colors.subtext1 },
              NeoTreeDirectoryName = { fg = colors.subtext1 },
              NeoTreeFloatBorder = { bg = colors.mantle, fg = colors.mantle },
              NeoTreeGitConflict = { fg = colors.red },
              NeoTreeGitDeleted = { fg = colors.red },
              NeoTreeGitIgnored = { fg = colors.overlay0 },
              NeoTreeGitModified = { fg = colors.peach },
              NeoTreeGitStaged = { fg = colors.green },
              NeoTreeGitUnstaged = { fg = colors.red },
              NeoTreeGitUntracked = { fg = colors.green },
              NeoTreeIndent = { fg = colors.surface1 },
              NeoTreeNormal = { bg = colors.mantle },
              NeoTreeNormalNC = { bg = colors.mantle },
              NeoTreeRootName = { fg = colors.subtext1, style = { "bold" } },
              NeoTreeTabActive = { fg = colors.text, bg = colors.mantle },
              NeoTreeTabInactive = { fg = colors.surface2, bg = colors.crust },
              NeoTreeTabSeparatorActive = { fg = colors.mantle, bg = colors.mantle },
              NeoTreeTabSeparatorInactive = { fg = colors.crust, bg = colors.crust },
              NeoTreeWinSeparator = { fg = colors.surface1, bg = colors.base },
              NormalFloat = { bg = colors.base },
              Pmenu = { bg = colors.mantle, fg = "" },
              -- telescope prompt
              TelescopePromptTitle = { fg = colors.mantle, bg = "#39fd9c", style = { "bold" } },
              TelescopePromptCounter = { fg = colors.red, style = { "bold" } },
              TelescopePromptBorder = { bg = colors.base },
              -- telescope results
              TelescopeResultsTitle = { link = "TelescopePromptTitle" },
              TelescopeResultsBorder = { link = "TelescopePromptBorder" },
              -- telescope preview
              TelescopePreviewTitle = { link = "TelescopePromptTitle" },
              TelescopePreviewBorder = { link = "TelescopePromptBorder" },
              VertSplit = { bg = colors.base, fg = colors.surface0 },
              WhichKeyFloat = { bg = colors.mantle },
              YankHighlight = { bg = colors.surface2 },
              FidgetTask = { fg = colors.subtext2 },
              FidgetTitle = { fg = colors.peach },

              IblIndent = { fg = colors.surface0 },
              IblScope = { fg = colors.overlay0 },

              Boolean = { fg = colors.mauve },
              Number = { fg = colors.mauve },
              Float = { fg = colors.mauve },

              PreProc = { fg = colors.mauve },
              PreCondit = { fg = colors.mauve },
              Include = { fg = colors.mauve },
              Define = { fg = colors.mauve },
              Conditional = { fg = colors.red },
              Repeat = { fg = colors.red },
              Keyword = { fg = colors.red },
              Typedef = { fg = colors.red },
              Exception = { fg = colors.red },
              Statement = { fg = colors.red },

              Error = { fg = colors.red },
              StorageClass = { fg = colors.peach },
              Tag = { fg = colors.peach },
              Label = { fg = colors.peach },
              Structure = { fg = colors.peach },
              Operator = { fg = colors.sapphire },
              Title = { fg = colors.peach },
              Special = { fg = colors.yellow },
              SpecialChar = { fg = colors.yellow },
              Type = { fg = colors.yellow, style = { "bold" } },
              Function = { fg = colors.green, style = { "bold" } },
              Delimiter = { fg = colors.subtext2 },
              Ignore = { fg = colors.subtext2 },
              Macro = { fg = colors.teal },

              TSAnnotation = { fg = colors.mauve },
              TSAttribute = { fg = colors.mauve },
              TSBoolean = { fg = colors.mauve },
              TSCharacter = { fg = colors.teal },
              TSCharacterSpecial = { link = "SpecialChar" },
              TSComment = { link = "Comment" },
              TSConditional = { fg = colors.red },
              TSConstBuiltin = { fg = colors.mauve },
              TSConstMacro = { fg = colors.mauve },
              TSConstant = { fg = colors.text },
              TSConstructor = { fg = colors.green },
              TSDebug = { link = "Debug" },
              TSDefine = { link = "Define" },
              TSEnvironment = { link = "Macro" },
              TSEnvironmentName = { link = "Type" },
              TSError = { link = "Error" },
              TSException = { fg = colors.red },
              TSField = { fg = colors.blue },
              TSFloat = { fg = colors.mauve },
              TSFuncBuiltin = { fg = colors.green },
              TSFuncMacro = { fg = colors.green },
              TSFunction = { fg = colors.green },
              TSFunctionCall = { fg = colors.green },
              TSInclude = { fg = colors.red },
              TSKeyword = { fg = colors.red },
              TSKeywordFunction = { fg = colors.red },
              TSKeywordOperator = { fg = colors.sapphire },
              TSKeywordReturn = { fg = colors.red },
              TSLabel = { fg = colors.peach },
              TSLiteral = { fg = colors.teal },
              TSMacro = { fg = colors.mauve },
              TSMethod = { fg = colors.green },
              TSMethodCall = { fg = colors.green },
              TSNamespace = { fg = colors.blue },
              TSNone = { fg = colors.yellow },
              TSNumber = { fg = colors.mauve },
              TSOperator = { fg = colors.sky },
              TSParameter = { fg = colors.text },
              TSParameterReference = { fg = colors.text },
              TSPreProc = { link = "PreProc" },
              TSProperty = { fg = colors.blue },
              TSPunctBracket = { fg = colors.text },
              TSPunctDelimiter = { fg = colors.teal },
              TSPunctSpecial = { fg = colors.yellow },
              TSRepeat = { fg = colors.red },
              TSStorageClass = { fg = colors.peach },
              TSStorageClassBuiltin = { fg = colors.peach },
              TSStrike = { fg = colors.text, style = { "strikethrough" } },
              TSString = { fg = colors.teal },
              TSStringEscape = { fg = colors.pink },
              TSStringRegex = { fg = colors.pink },
              TSStringSpecial = { link = "SpecialChar" },
              TSStrong = { fg = colors.text, style = { "bold" } },
              TSSymbol = { fg = colors.yellow },
              TSTag = { fg = colors.mauve },
              TSTagAttribute = { fg = colors.green },
              TSTagDelimiter = { fg = colors.teal },
              TSText = { fg = colors.text },
              TSTextReference = { fg = colors.blue },
              TSTitle = { link = "Title" },
              TSType = { fg = colors.yellow },
              TSTypeBuiltin = { fg = colors.yellow },
              TSURI = { fg = colors.text, style = { "underline" } },
              TSUnderline = { fg = colors.text, style = { "underline" } },
              TSVariable = { fg = colors.text },
              TSVariableBuiltin = { fg = colors.text },

              NavicIconsFile = { link = "TSURI" },
              NavicIconsModule = { link = "TSNamespace" },
              NavicIconsNamespace = { link = "TSNamespace" },
              NavicIconsPackage = { link = "TSNamespace" },
              NavicIconsClass = { link = "TSType" },
              NavicIconsMethod = { link = "TSMethod" },
              NavicIconsProperty = { link = "TSProperty" },
              NavicIconsField = { link = "TSField" },
              NavicIconsConstructor = { link = "TSConstructor" },
              NavicIconsEnum = { link = "TSType" },
              NavicIconsInterface = { link = "TSType" },
              NavicIconsFunction = { link = "TSFunction" },
              NavicIconsVariable = { link = "TSVariable" },
              NavicIconsConstant = { link = "TSConstant" },
              NavicIconsString = { link = "TSString" },
              NavicIconsNumber = { link = "TSNumber" },
              NavicIconsBoolean = { link = "TSBoolean" },
              NavicIconsArray = { link = "TSConstant" },
              NavicIconsObject = { link = "TSType" },
              NavicIconsKey = { link = "TSKeyword" },
              NavicIconsNull = { link = "TSConstant" },
              NavicIconsEnumMember = { link = "TSField" },
              NavicIconsStruct = { link = "TSType" },
              NavicIconsEvent = { link = "TSType" },
              NavicIconsOperator = { link = "TSOperator" },
              NavicIconsTypeParameter = { link = "TSParameter" },
              NavicText = { fg = colors.text },
              NavicSeparator = { fg = colors.text },
            }
          end,
        },
      })
      vim.api.nvim_command("colorscheme catppuccin")
    end,
  },
}
